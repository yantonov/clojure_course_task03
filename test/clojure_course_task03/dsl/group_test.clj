(ns clojure-course-task03.dsl.group-test
  (:require [clojure.test :as test])
  (:require [clojure-course-task03.dsl.group :as target])
  (:use clojure-course-task03.dsl.select))

(test/deftest select-fn-name-test
  (test/testing "name convention for select function name"
    (test/is (= 'select-agent-table-name (target/select-fn-name 'Agent 'table-name)))))

(test/deftest group-privileges-var-name
  (test/testing "name convention for group privileges var name"
    (test/is (= 'Agent-group-privileges (target/group-privileges-var-name 'Agent)))))

(target/group
 Agent1
 proposal -> [person, phone, address, price]
 agents -> [client_id, proposal_id, agent])

(test/deftest group-macro-defines-fn-seq-to-extract-table-privileges
  (test/testing "Group macro defines sequence of functions get sql statements."
    (let [ns-sym 'clojure-course-task03.dsl.group-test]
      (test/testing "select-agent-agents is defined inside current namespace."
        (test/is (false? (nil? (ns-resolve ns-sym
                                           'select-agent1-agents)))))
      (test/testing "select-agent-proposal is defined inside current namespace."
        (test/is (false? (nil? (ns-resolve ns-sym
                                           'select-agent1-proposal))))))))

(target/group
 Agent2
 proposal -> [person, phone, address, price]
 agents -> [client_id, proposal_id, agent]
 qwerty -> [qwerty])

(test/deftest fn-generated-by-group-macro-returns-sql-statements
  (test/testing "Functions generated by group macro returns sql statements"
    (let [ns-sym 'clojure-course-task03.dsl.group-test]
      (let [f (ns-resolve ns-sym
                          'select-agent2-agents)]
        (test/testing "select-agent-agents returns table privileges."
          (test/is (= "SELECT client_id,proposal_id,agent FROM agents " (f))))
        )
      (let [f (ns-resolve ns-sym
                          'select-agent2-proposal)]
        (test/testing "select-agent-proposal returns table privileges."
          (test/is (= "SELECT person,phone,address,price FROM proposal " (f))))
        )
      (let [f (ns-resolve ns-sym
                          'select-agent2-qwerty)]
        (test/testing "select-agent-test returns table privileges."
          (test/is (= "SELECT qwerty FROM qwerty " (f))))))))

(target/group
 Agent3
 proposal -> [person, phone, address, price]
 agents -> [client_id, proposal_id, agent]
 another-table trash-delimiter [])

(test/deftest group-macro-syntax-rule
  (test/testing "Arrow symbol separates table name and column list. Otherwise corresponding entry is not processed."
    (let [f (ns-resolve 'clojure-course-task03.dsl.group-test
                        'select-agent3-another-table)]
      (test/testing "select-agent3-another-table is not defined inside current namespace"
        (test/is (nil? f))))))

(target/group
 Agent4
 proposal -> [:all])

(test/deftest select-all-test
  (test/testing "in case of selecting all columns general select must be used, means select *"
    (let [f (ns-resolve 'clojure-course-task03.dsl.group-test
                        'select-agent4-proposal)]
      (test/testing "select-agent4-agents returns table privileges."
        (test/is (= "SELECT * FROM proposal " (f)))))))
