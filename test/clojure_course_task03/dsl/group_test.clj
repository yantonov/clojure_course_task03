(ns clojure-course-task03.dsl.group-test
  (:require [clojure.test :as test])
  (:require [clojure-course-task03.dsl.group :as target]))

(test/deftest group-macro-defines-fn-seq-to-extract-table-privileges
  (test/testing "Group macro defines sequence of functions to extract table privileges"
    (let [ns-sym (symbol (ns-name *ns*))]
      (target/group Agent
               proposal -> [person, phone, address, price]
               agents -> [client_id, proposal_id, agent])
      (test/is (false? (nil? (ns-resolve ns-sym 'select-agent-agents))))
      (test/is (false? (nil? (ns-resolve ns-sym 'select-agent-proposal)))))
    ))

(test/deftest register-group-test
  (test/is (= {}
              (do
                (target/register-group! 'Agent)
                (target/group-privileges 'Agent)))))

(test/deftest unregister-group-test
  (test/is (= nil
              (do
                (target/register-group! 'Agent)
                (target/unregister-group! 'Agent)
                (target/group-privileges 'Agent)))))

(test/deftest register-table-privileges-test
  (test/is (= 'privileges-info
              (do
                (target/register-group! 'Agent)
                (target/register-table-privileges! 'Agent 'table 'privileges-info)
                (target/table-privileges 'Agent 'table)))))

(test/deftest fn-generated-by-group-macro-returns-table-privileges
  (test/testing "Functions generated by group macro returns table privileges"
    (let [ns-sym (symbol (ns-name *ns*))]
      (target/group Agent
               proposal -> [person, phone, address, price]
               agents -> [client_id, proposal_id, agent])
      (test/is (= ['client_id, 'proposal_id, 'agent]
                  (apply (ns-resolve ns-sym 'select-agent-agents) nil)))
      (test/is (= ['person, 'phone, 'address, 'price]
                  (apply (ns-resolve ns-sym 'select-agent-proposal) nil)))
      )))
