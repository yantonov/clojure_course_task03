(ns clojure-course-task03.dsl.group-test
  (:require [clojure.test :as test])
  (:require [clojure-course-task03.dsl.group :as target]))

(test/deftest group-macro-defines-fn-seq-to-extract-table-privileges
  (test/testing "Group macro defines sequence of functions get sql statements."
    (let [ns-sym (symbol (ns-name *ns*))]
      (eval (macroexpand
             '(clojure-course-task03.dsl.group/group
               Agent
               proposal -> [person, phone, address, price]
               agents -> [client_id, proposal_id, agent])))
      (test/testing "select-agent-agents is defined inside current namespace."
        (test/is (false? (nil? (ns-resolve ns-sym
                                           'select-agent-agents)))))
      (test/testing "select-agent-proposal is defined inside current namespace."
        (test/is (false? (nil? (ns-resolve ns-sym
                                           'select-agent-proposal))))))
    ))

(test/deftest register-group-test
  (test/is (= {}
              (do
                (target/register-group! 'Agent)
                (target/group-privileges 'Agent)))))

(test/deftest unregister-group-test
  (test/is (= nil
              (do
                (target/register-group! 'Agent)
                (target/unregister-group! 'Agent)
                (target/group-privileges 'Agent)))))

(test/deftest register-table-privileges-test
  (test/is (= 'privileges-info
              (do
                (target/register-group! 'Agent)
                (target/register-table-privileges! 'Agent 'table 'privileges-info)
                (target/table-privileges 'Agent 'table)))))

(test/deftest fn-generated-by-group-macro-returns-sql-statements
  (test/testing "Functions generated by group macro returns sql statements"
    (let [ns-sym (symbol (ns-name *ns*))]
      (eval (macroexpand
             '(clojure-course-task03.dsl.group/group
               Agent
               proposal -> [person, phone, address, price]
               agents -> [client_id, proposal_id, agent])))
      (let [f (ns-resolve ns-sym
                          'select-agent-agents)]
        (test/testing "select-agent-agents returns table privileges."
          (test/is (= "SELECT client_id,proposal_id,agent FROM agents " (f))))
        )
      (let [f (ns-resolve ns-sym
                          'select-agent-proposal)]
        (test/testing "select-agent-proposal returns table privileges."
          (test/is (= "SELECT person,phone,address,price FROM proposal " (f))))
        ))))

(test/deftest group-macro-syntax-rule
  (test/testing "Arrow symbol separates table name and column list. Otherwise corresponding entry is not processed."
    (let [ns-sym (symbol (ns-name *ns*))]
      (eval (macroexpand
             '(clojure-course-task03.dsl.group/group
               Agent
               proposal -> [person, phone, address, price]
               agents -> [client_id, proposal_id, agent]
               another-table trash-delimiter [])))
      (let [f (ns-resolve ns-sym
                          'select-agent-another-table)]
        (test/testing "select-agent-another-table is not defined inside current namespace"
          (test/is (nil? f)))))))

(test/deftest select-all-test
  (test/testing "in case of selecting all columns general select must be used, means select *"
    (let [ns-sym (symbol (ns-name *ns*))]
      (eval (macroexpand
             '(clojure-course-task03.dsl.group/group
               Agent
               proposal -> [all])))
      (let [f (ns-resolve ns-sym
                          'select-agent-proposal)]
        (test/testing "select-agent-agents returns table privileges."
          (test/is (= "SELECT * FROM proposal " (f))))
        ))))
